syntax = "proto3";
package endorsement;

option go_package = "github.com/veraison/endorsement";

import "google/protobuf/struct.proto";
import "result.proto";
import "attestation_format.proto";

enum TaType {
    UNSPECIFIED = 0;
    RAWPUBLICKEY = 1;
    // Refer https://github.com/veraison/veraison/issues/76, to introduce certs here!
    INVALID = 255;
}

message EndorsementID {
    common.AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message Evidence {
    google.protobuf.Struct value = 1;
}

message GetEndorsementsRequest{
    EndorsementID id = 1;
    Evidence evidence = 2;
}

message Status {
    bool result = 1;
    string error_detail = 2;
}

message GetEndorsementsResponse {
    Status status = 1;
    string details = 2;
    common.TrustVector trust_vector = 3;
    google.protobuf.Struct endorsements = 4;
}

message OpenRequest {
}

message CloseRequest {
}

message SwComponentID {
    common.AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message SwComponent {
    SwComponentID id = 1;
    google.protobuf.Struct attributes = 2;
}

message AddSwComponentsRequest {
    repeated SwComponent info = 1;
}

message AddSwComponentsResponse {
    Status status = 1;
}

message GetSwComponentRequest {
    SwComponentID id = 1;
}

message GetSwComponentResponse {
    Status status = 1;
    google.protobuf.Struct attributes = 2;
}

message TrustAnchorID {
    common.AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message TrustAnchorValue {
    TaType type = 1;
    google.protobuf.Struct value = 2;
}

message TrustAnchor {
    TrustAnchorID id = 1;
    TrustAnchorValue value = 2;
}

message AddTrustAnchorRequest {
    TrustAnchor trust_anchor = 1;
}

message AddTrustAnchorResponse {
    Status status = 1;
}

message GetTrustAnchorRequest {
    TrustAnchorID ta_id = 1;
}

message GetTrustAnchorResponse {
    Status status = 1;
    TrustAnchorValue value = 2;
}

message OpenResponse {
    Status status = 1;
}

message CloseResponse {
    Status status = 1;
}

service Store {
    rpc Open(OpenRequest) returns (OpenResponse);
    rpc Close(CloseRequest) returns (CloseResponse);
}

service Fetcher {
    rpc GetEndorsements(GetEndorsementsRequest) returns (GetEndorsementsResponse);
}

// Provisioner is the Service end point that is used to store
// and retrieve Software Components and Trust Anchors to and from
// the Endorsement Store
service Provisioner {
    rpc AddSwComponents(AddSwComponentsRequest) returns (AddSwComponentsResponse);
    rpc GetSwComponent(GetSwComponentRequest)  returns (GetSwComponentResponse);
    rpc AddTrustAnchor(AddTrustAnchorRequest) returns (AddTrustAnchorResponse);
    rpc GetTrustAnchor(GetTrustAnchorRequest) returns (GetTrustAnchorResponse);
}
// vim: set et sts=4 sw=4 si :
