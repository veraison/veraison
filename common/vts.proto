syntax = "proto3";
package common;

option go_package = "github.com/veraison/common";


import "google/protobuf/struct.proto";
import "result.proto";
import "attestation_format.proto";
import "attestation.proto";
import "param.proto";
import "token.proto";


enum TAType {
    TA_UNSPECIFIED = 0;
    TA_RAWPUBLICKEY = 1;
    // Refer https://github.com/veraison/veraison/issues/76, to introduce certs here!
    TA_INVALID = 255;
}

message EndorsementID {
    AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message Evidence {
    google.protobuf.Struct value = 1;
}

message GetEndorsementsRequest{
    EndorsementID id = 1;
    Evidence evidence = 2;
}

message Status {
    bool result = 1;
    string error_detail = 2;
}

message GetEndorsementsResponse {
    Status status = 1;
    string details = 2;
    TrustVector trust_vector = 3;
    google.protobuf.Struct endorsements = 4;
}

message SwComponentID {
    AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message SwComponent {
    SwComponentID id = 1;
    google.protobuf.Struct attributes = 2;
}

message AddSwComponentsRequest {
    repeated SwComponent info = 1;
}

message AddSwComponentsResponse {
    Status status = 1;
}

message GetSwComponentRequest {
    SwComponentID id = 1;
}

message GetSwComponentResponse {
    Status status = 1;
    google.protobuf.Struct attributes = 2;
}

message TrustAnchorID {
    AttestationFormat type = 1;
    google.protobuf.Struct parts = 2;
}

message TrustAnchorValue {
    TAType type = 1;
    google.protobuf.Struct value = 2;
}

message TrustAnchor {
    TrustAnchorID id = 1;
    TrustAnchorValue value = 2;
}

message AddTrustAnchorRequest {
    TrustAnchor trust_anchor = 1;
}

message AddTrustAnchorResponse {
    Status status = 1;
}

message GetTrustAnchorRequest {
    TrustAnchorID ta_id = 1;
}

message GetTrustAnchorResponse {
    Status status = 1;
    TrustAnchorValue value = 2;
}

// Client interface for the Veraison Trusted Services component.
service VTS {
    // Returns attestation information -- evidences, endorsed claims, trust
    // vector, etc -- for the provided attestation token data.
    rpc GetAttestation(AttestationToken) returns (Attestation);

    // Service endpoints that are used to store and retrieve Software Components
    // and Trust Anchors to and from the endorsement store
    rpc AddSwComponents(AddSwComponentsRequest) returns (AddSwComponentsResponse);
    rpc GetSwComponent(GetSwComponentRequest)  returns (GetSwComponentResponse);
    rpc AddTrustAnchor(AddTrustAnchorRequest) returns (AddTrustAnchorResponse);
    rpc GetTrustAnchor(GetTrustAnchorRequest) returns (GetTrustAnchorResponse);
}

